// Generated by CoffeeScript 1.8.0
(function() {
  var Car, Street,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Car = (function(_super) {
    __extends(Car, _super);

    function Car() {
      return Car.__super__.constructor.apply(this, arguments);
    }

    return Car;

  })(THREE.Mesh);

  ({
    constructor: function() {
      var geometry, material;
      geometry = new THREE.CubeGeometry(200, 200, 200);
      material = new THREE.MeshBasicMaterial({
        color: 0xffffff
      });
      return THREE.Mesh.call(this, geometry, material);
    }
  });

  Street = (function() {
    function Street() {
      this.update = __bind(this.update, this);
      this.render = __bind(this.render, this);
      this.init = __bind(this.init, this);
      this.scene = null;
      this.camera = null;
      this.renderer = null;
    }

    Street.prototype.init = function() {
      var car;
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
      this.renderer = new THREE.WebGLRenderer();
      this.renderer.setClearColor(0x333333);
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      $("#render").append(this.renderer.domElement);
      car = new Car();
      return this.scene.add(car);
    };

    Street.prototype.render = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    Street.prototype.update = function() {};

    return Street;

  })();

  window.onload = function() {
    var game;
    game = new Street();
    game.init();
    return game.render();
  };

}).call(this);
